package main

import (
	"log"

	"time"

	"encoding/json"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func main() {

	bot := tbot()
	db := InitDB("db.sqlite3")

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	var (
		typesTest TypesTest
		psyParams = PsyParams{bot: bot}
	)
	testD := make(map[int64]TestData)
	userD := make(map[int64]map[string]int)
	answers := make(map[int64]map[int]int)
	timeAnsw := make(map[int64]map[string]time.Time)

	data := readFile("json/typeTest.json")
	if err := json.Unmarshal(data, &typesTest); err != nil {
		log.Fatal(err)
	}

	for update := range updates {

		var (
			text   string
			chatID int64
		)

		if update.Message != nil {
			text = update.Message.Text
			chatID = update.Message.Chat.ID

		} else if update.CallbackQuery != nil {
			text = update.CallbackQuery.Data
			chatID = update.CallbackQuery.Message.Chat.ID

		} else {
			continue
		}

		psyParams.chatid = chatID

		_, found := userD[chatID]
		if found == false {
			userData := make(map[string]int)
			userD[chatID] = userData
		}

		_, found = timeAnsw[chatID]
		if found == false {
			timeAnswers := make(map[string]time.Time)
			timeAnsw[chatID] = timeAnswers
		}

		InsertUser(chatID, db)

		if text == "/start" || text == "–í—ã—Ö–æ–¥ üö™" { //–ù—É–ª–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å 0 - —Å—Ç–∞—Ä—Ç

			psyParams.text = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n–ó–¥–µ—Å—å —Å–æ–±—Ä–∞–Ω—ã –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à–µ –ø—Å–∏—Ö–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ."
			change(psyParams)

			setZero(chatID, userD)

			psyParams.keyboard = testKeyboard
			psyParams.text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–µ—Å—Ç–∞."
			change(psyParams)

			userD[chatID]["level"] = 1

		} else if text == "–ü—Ä–æ—à–ª—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã üïî" || text == "/show_results" {

			psyParams.text = SelectOldResult(chatID, typesTest, db)
			if len(psyParams.text) == 0 {
				psyParams.text = "ü¶•–ü–æ–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç.\n–ü—Ä–æ–π–¥–∏—Ç–µ –ª—é–±–æ–π –∏–∑ —Ç–µ—Å—Ç–æ–≤ –¥–æ –∫–æ–Ω—Ü–∞, –∏ —Ç–æ–≥–¥–∞ –æ–Ω–∏ –æ—Ç–æ–±—Ä–∞–∑—è—Ç—Å—è –∑–¥–µ—Å—å."
			}
			change(psyParams)

		} else if text == "/tests" {

			setZero(chatID, userD)
			userD[chatID]["level"] = 2
			allTests(chatID, typesTest, db, bot)

		} else if text == "/about_author" {

			setZero(chatID, userD)
			psyParams.text = "–ú–µ–Ω—è –∑–æ–≤—É—Ç –î–∞—Ä—å—è, —è ‚Äî —Å–æ–∑–¥–∞—Ç–µ–ª—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞, –ø—Å–∏—Ö–æ–ª–æ–≥, –ø—Å–∏—Ö–∏–∞—Ç—Ä. –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫–æ –º–Ω–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞. –ü–∏—à–∏—Ç–µ: @stayclosetonight\n\n–ß—Ç–æ–±—ã –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å –º–µ–Ω—è, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –Ω–∞ <a href=\"https://www.b17.ru/daryadudinaa/\">—Å–∞–π—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤</a> –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è –Ω–∞ <a href=\"https://yoomoney.ru/to/4100117806595904\">—Ä–∞–∑–≤–∏—Ç–∏–µ –ø—Ä–æ–µ–∫—Ç–∞</a>."
			change(psyParams)

		} else if userD[chatID]["level"] == 1 { //–ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å 1 - –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Ç–µ—Å—Ç–æ–≤

			psyParams.text = text
			err := typeTest(psyParams, typesTest)
			if err != nil {
				log.Println(err)
			}
			userD[chatID]["level"] = 2

		} else if userD[chatID]["level"] == 2 { //–í—ã–±–æ—Ä —à–∫–∞–ª—ã - 2 —É—Ä–æ–≤–µ–Ω—å

			psyParams.text = text
			testData, err := testDetails(psyParams, typesTest)
			if err != nil {
				log.Println(err)
			} else {
				testD[chatID] = testData
				userD[chatID]["testID"] = SelectTestID(testD[chatID].NameEng, db)
				userD[chatID]["level"] = 3
			}

		} else if userD[chatID]["level"] == 3 { //–ü–æ–¥—Å—á–µ—Ç –±–∞–ª–ª–æ–≤ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –Ω–æ–≤–æ–º –≤—ã–±–æ—Ä–µ

			/*else {
				if len(testD[chatID].Scales) != 0 {
					ans := make(map[int]int)
					answers[chatID] = ans
				}
			}*/
			timeAnsw[chatID]["timeUserAnsw"] = update.Message.Time()

			log.Println(update.Message.Date)

			log.Println(timeAnsw[chatID]["timeUserAnsw"], timeAnsw[chatID]["timeBotAnsw"].Round(time.Second))

			if timeAnsw[chatID]["timeUserAnsw"].Before(timeAnsw[chatID]["timeBotAnsw"].Round(time.Second)) {

				log.Println("–í–≤–µ–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–¥—Ä—è–¥ –Ω–∞ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å")
				psyParams.text = "‚ùó–ù–µ —Ç–æ—Ä–æ–ø–∏—Ç–µ—Å—å."
				psyParams.keyboard = typeTestKeyboard[testD[chatID].NameEng]
				change(psyParams)

			} else {

				var (
					score int
					err   error
				)

				if userD[chatID]["number"] != 0 {
					score, err = countScore(testD, chatID, text, userD[chatID]["number"])
					userD[chatID]["score"] += score
					if err != nil {
						log.Println(err)
						psyParams.text = "‚ùó–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ."
						psyParams.keyboard = typeTestKeyboard[testD[chatID].NameEng]
						change(psyParams)
					}

				} else if text != "–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç" {
					psyParams.text = "‚ùó–ù–µ –≤–≤–æ–¥–∏—Ç–µ –Ω–∏—á–µ–≥–æ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. –í—ã–±–∏—Ä–∞–π—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤. –¢–µ—Å—Ç –Ω–∞—á–∞–ª—Å—è."
					change(psyParams)
				}

				if userD[chatID]["number"] < len(testD[chatID].Questions) {

					if err == nil {
						//time.Sleep(time.Second)
						timeAnsw[chatID]["timeBotAnsw"] = time.Now()
						numberQuestionTest(psyParams, testD, chatID, userD[chatID]["number"])
						userD[chatID]["number"] += 1

					}

				} else {

					psyParams.keyboard = backKeyboard

					tresult := Tresult{
						Result: userD[chatID]["score"],
						Date:   time.Now(),
						ChatID: chatID,
						TestID: userD[chatID]["testID"]}
					InsertResult(tresult, db)

					psyParams.text = result(answers, userD[chatID]["score"], testD, chatID)
					change(psyParams)

					clearAll(chatID, testD, userD)
				}
			}
		}
	}
}
